SET SERVEROUTPUT ON;
-- MODYFIKACJA TABELI PRACOWNIK
ALTER TABLE PRACOWNIK ADD PODWYZKA INT;

-- PROCEDURA 1 Z WYKORZYSTANIEM KURSORA WSTAWIA PRACOWNIKOM KTORZY MAJA PENSJE MNIEJSZA NIZ PODANA JAKO ARGUMENT DO KOLUMNY PODWYZKA DRUGA WARTOSC Z PARAMETRU PROCEDURY.
CREATE OR REPLACE PROCEDURE UPDATESAL(PODW NUMBER, GRANICA NUMBER)
AS
SAL PRACOWNIK.PENSJA%TYPE;
FULLNAME VARCHAR2(40);
PRACOWNIK_PENSJA NUMBER;
CURSOR UPENSJA IS SELECT IMIE || ' ' || NAZWISKO PRACOWNIK, PENSJA FROM PRACOWNIK WHERE PENSJA <= GRANICA;
VAR_PENSJA UPENSJA%ROWTYPE;
BEGIN
OPEN UPENSJA;
LOOP
    FETCH UPENSJA INTO VAR_PENSJA;
    EXIT WHEN UPENSJA%NOTFOUND;
    SAL := VAR_PENSJA.PENSJA;
    FULLNAME := VAR_PENSJA.PENSJA;
    PRACOWNIK_PENSJA := PRACOWNIK_PENSJA + PODW;
    UPDATE PRACOWNIK SET PODWYZKA = PODW WHERE ID_PRACOWNIK IN (SELECT ID_PRACOWNIK FROM PRACOWNIK WHERE PENSJA <= GRANICA);
    DBMS_OUTPUT.PUT_LINE('PRACOWNIK ' || FULLNAME || ' DOSTAL PODWYZKE W WYSOKOSCI ' || PODW || ' I ZARABIA ' || PRACOWNIK_PENSJA);
END LOOP;
CLOSE UPENSJA;
END;

EXECUTE UPDATESAL(1000, 3000);

-- PROCEDURA 2 DODAJE PRACOWNIKOW
CREATE OR REPLACE PROCEDURE ADDPRACOWNIK(IMIE VARCHAR2, NAZWISKO VARCHAR2, PENSJA INTEGER, KUCHARZ INT)
AS
IDPRACOWNIK INTEGER;
PRACOWNIK_COUNT NUMBER;
BEGIN
    SELECT COUNT(1) INTO PRACOWNIK_COUNT FROM PRACOWNIK WHERE IMIE = IMIE AND NAZWISKO = NAZWISKO;
    SELECT MAX(ID_PRACOWNIK) + 1 INTO IDPRACOWNIK FROM PRACOWNIK;
    IF PRACOWNIK_COUNT = 0
    THEN
        INSERT INTO PRACOWNIK(ID_PRACOWNIK, IMIE, NAZWISKO, DATA_ZATRUDNIENIA, PENSJA, KUCHARZ_ID_KUCHARZ, PODWYZKA) VALUES(IDPRACOWNIK, IMIE, NAZWISKO, SYSDATE(), PENSJA, KUCHARZ, 0);
        DBMS_OUTPUT.PUT_LINE('WSTAWIONO PRACOWNIKA ' || IMIE || ' ' || NAZWISKO || ' ZATRUDNIONEGO W DNIU ');
    ELSE 
         RAISE_APPLICATION_ERROR(-20112, 'PRACOWNIK ' || IMIE || ' ' || NAZWISKO || ' JUZ ISTNEIEJE');
    END IF;
END;

EXECUTE ADDPRACOWNIK ('TEST', 'TEST', 1000, 0);

-- DODANIE TABELI DO PRZECHOWANIA ILOSCI ZAMOWIEN
CREATE TABLE ILOSCZAMOWIEN (ILOSC INT, DATAAKTUALIZACJI DATE); 

-- WYZWALACZ 1 WYZWALACZ DO ZATRZYMANIA HISTORI ZAMOWIEN
CREATE OR REPLACE TRIGGER ZAM
BEFORE INSERT OR UPDATE ON ZAMOWIENIE
DECLARE
ILOSC INTEGER;
BEGIN
    SELECT COUNT(*) INTO ILOSC FROM ZAMOWIENIE;
    INSERT INTO ILOSCZAMOWIEN VALUES(ILOSC, SYSDATE());
END;

INSERT INTO ZAMOWIENIE VALUES (10, '2020-02-07', 10, 'NAPOJE', 0, 0, 0, 0, 0);

-- WYZWALACZ 2 NIE POZWALA WPROWADZIC KUCHARZA Z DOSWIADCZENIEM MNIEJSZYM NIZ 2
CREATE OR REPLACE TRIGGER KEXP
BEFORE INSERT OR UPDATE ON KUCHARZ
    FOR EACH ROW
    DECLARE
    BEGIN
        IF :NEW.DOSWIADCZENIE < 2 THEN
            RAISE_APPLICATION_ERROR(-20112, 'KUCHARZ NIE MOZE MIEC DOSWIADCZENIA MNIEJSZEGO NIZ 2');
        END IF;
    END;
